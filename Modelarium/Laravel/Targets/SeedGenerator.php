<?php declare(strict_types=1);

namespace Modelarium\Laravel\Targets;

use GraphQL\Type\Definition\ObjectType;
use Modelarium\BaseGenerator;
use Modelarium\Exception\Exception;
use Modelarium\GeneratedCollection;
use Modelarium\GeneratedItem;
use Modelarium\Parser;

class SeedGenerator extends BaseGenerator
{
    /**
     * @var string
     */
    protected $stubDir = __DIR__ . "/stubs/";

    /**
     * Extra seed code generated by parser
     *
     * @var string[]
     */
    protected $extraCode = [];

    public function generate(): GeneratedCollection
    {
        if (!($this->type instanceof ObjectType)) {
            throw new Exception('Invalid type on seed generator:' . get_class($this->type));
        }
        /**
         * @var ObjectType $t
         */
        $t = $this->type;
        foreach ($t->getFields() as $field) {
            $directives = $field->astNode->directives;
            $this->processDirectives($field, $directives);
        }

        return new GeneratedCollection(
            [ new GeneratedItem(
                GeneratedItem::TYPE_SEED,
                $this->generateString(),
                $this->getGenerateFilename()
            )]
        );
    }

    public function processDirectives(
        \GraphQL\Type\Definition\FieldDefinition $field,
        \GraphQL\Language\AST\NodeList $directives
    ): void {
        $lowerName = mb_strtolower($this->getInflector()->singularize($field->name));
        foreach ($directives as $directive) {
            $name = $directive->name->value;
            switch ($name) {
                case 'belongsToMany':
                    $type1 = $this->lowerName;
                    $type2 = $lowerName;
                    if (strcasecmp($type1, $type2) < 0) { // TODO: check this, might not work
                        $relationship = mb_strtolower($this->getInflector()->pluralize($field->name));
                        $this->extraCode[] = $this->makeManyToManySeed($type1, $type2, $relationship);
                    }
                break;
                case 'morphedByMany':
                    // TODO $relation = Parser::getDirectiveArgumentByName($directive, 'relation', $lowerName);
                break;
            default:
            break;
            }
        }
    }

    protected static function makeManyToManySeed(string $sourceModel, string $targetModel, string $relationship): string
    {
        return <<<EOF

        try {
            \${$targetModel}Items = App\\Models\\$targetModel::all();
            \$model->{$relationship}()->attach(
                \${$targetModel}Items->random(rand(1, 3))->pluck('id')->toArray()
            );
        }
        catch (\InvalidArgumentException \$e) {
            \$model->{$relationship}()->attach(
                \${$targetModel}Items->random(1)->pluck('id')->toArray()
            );
        }
EOF;
    }

    public function generateString(): string
    {
        return $this->templateStub(
            'seed',
            [
                'extraCode' => join("\n", $this->extraCode)
            ]
        );
    }

    public function getGenerateFilename(): string
    {
        return $this->getBasePath('database/seeds/'. $this->studlyName . 'Seeder.php');
    }
}
