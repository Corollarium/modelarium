<?php declare(strict_types=1);

namespace Modelarium;

use Formularium\Formularium;
use Illuminate\Support\Str;
use Nette\PhpGenerator\PhpNamespace;

final class Util
{
    public static function generateLighthouseTypeFile(string $name, string $ns = 'Modelarium\\Types'): string
    {
        $date = date('c');
        $HEADER = <<<EOF
<?php declare(strict_types=1);
/**
 * This file is automatically generated by Modelarium on {$date}.
 */


EOF;
        
        $printer = new \Nette\PhpGenerator\PsrPrinter;
        $typeName = Str::lower($name);
        
        $namespace = new PhpNamespace($ns);
        $namespace->addClass('Datatype_' . $name)
            ->setExtends('\\Modelarium\\Types\\FormulariumScalarType');

        $stub = $HEADER . $printer->printNamespace($namespace);

        return $stub;
    }

    /**
     * @param array<string, string> $datatypes a list class name => datatype.
     * @param string $ns The namespace for these types
     * @return string[]
     */
    public static function scalars(array $datatypes, string $ns): array
    {
        $graphql = [ '# File automatically generated by Modelarium on ' . date('c') . "\n\n" ];

        foreach ($datatypes as $name) {
            $typeName = Str::studly($name);

            if ($typeName === 'String' ||
                $typeName === 'Boolean' ||
                $typeName === 'Int' ||
                $typeName === 'Float'
            ) {
                // base types
                continue;
            }

            $data = self::generateLighthouseTypeFile($name);

            // TODO $filename = __DIR__ . '/../Modelarium/Types/Datatype_' . $name . '.php';
            // TODO \Safe\file_put_contents($filename, $data['php]);

            $graphql[] = "scalar $typeName @scalar(class: \"" .
                str_replace('\\', '\\\\', $ns . '\\Datatype_' . $name) .
                "\")";
        }
        
        return $graphql;
    }

    public static function build(): string
    {
        $ns = 'xxx';
        $graphql = self::scalars(Formularium::getDatatypeNames(), $ns);
        
        return implode("\n\n", $graphql);
    }

    /**
     * TODO
     * @throws
     *
    public static generateDirectives(string $filename): void
    {
        \Safe\file_put_contents(
            $filename
            LaravelProcessor::getDirectivesGraphqlString()
        );
    } */
}
