<?php declare(strict_types=1);

namespace Modelarium;

use Formularium\Formularium;
use Illuminate\Support\Str;
use Nette\PhpGenerator\PhpNamespace;

final class Util
{
    protected const HEADER =
'<?php declare(strict_types=1);
/**
 * This file is automatically generated by Formularium.
 */

 ';

    public static function scalars(): string
    {
        $graphql = [
'"""
This file is auto generated.
"""'
        ];
        $printer = new \Nette\PhpGenerator\PsrPrinter;
        $datatypes = Formularium::getDatatypeNames();
        foreach ($datatypes as $name) {
            $typeName = Str::studly($name);

            if ($typeName === 'String' ||
                $typeName === 'Boolean' ||
                $typeName === 'Int' ||
                $typeName === 'Float'
            ) {
                // base types
                continue;
            }

            $ns = 'Modelarium\\Types';
            $namespace = new PhpNamespace($ns);
            $namespace->addClass('Datatype_' . $name)
                ->setExtends('FormulariumScalarType');

            $stub = self::HEADER . $printer->printNamespace($namespace);

            // TODO $filename = __DIR__ . '/../Modelarium/Types/Datatype_' . $name . '.php';
            // TODO \Safe\file_put_contents($filename, $stub);

            $graphql[] = "scalar $typeName @scalar(class: \"" .
                str_replace('\\', '\\\\', $ns . '\\Datatype_' . $name) .
                "\")";
        }
        
        return implode("\n\n", $graphql);
    }

    /**
     * TODO
     * @throws
     *
    public static generateDirectives(string $filename): void
    {
        \Safe\file_put_contents(
            $filename
            LaravelProcessor::getDirectivesGraphqlString()
        );
    } */
}
