<?php declare(strict_types=1);

namespace Modelarium;

use Formularium\Formularium;
use Illuminate\Support\Str;
use Nette\PhpGenerator\PhpNamespace;
use HaydenPierce\ClassFinder\ClassFinder;

final class Util
{
    /**
     * Undocumented function
     *
     * @param string $name The type name
     * @param string $ns The namespace
     * @return string
     */
    public static function generateLighthouseTypeFile(string $name, string $ns): string
    {
        $date = date('c');
        $HEADER = <<<EOF
<?php declare(strict_types=1);
/**
 * This file is automatically generated by Modelarium on {$date}.
 */


EOF;
        
        $printer = new \Nette\PhpGenerator\PsrPrinter;
        $typeName = Str::lower($name);
        
        $namespace = new PhpNamespace($ns);
        $namespace->addClass('Datatype_' . $name)
            ->setExtends('\\Modelarium\\Types\\FormulariumScalarType');

        $stub = $HEADER . $printer->printNamespace($namespace);

        return $stub;
    }

    /**
     * @param array<string, string> $datatypes a list class name => datatype.
     * @param string $ns The namespace for these types
     * @return string[]
     */
    public static function scalars(array $datatypes, string $ns): array
    {
        $graphql = [ '# File automatically generated by Modelarium on ' . date('c') . "\n\n" ];

        foreach ($datatypes as $name) {
            $typeName = Str::studly($name);

            if ($typeName === 'String' ||
                $typeName === 'Boolean' ||
                $typeName === 'Int' ||
                $typeName === 'Float'
            ) {
                // base types
                continue;
            }

            $graphql[] = "scalar $typeName @scalar(class: \"" .
                str_replace('\\', '\\\\', $ns . '\\Datatype_' . $name) .
                "\")\n";
        }
        
        return $graphql;
    }

    /**
     * TODO
     * @throws
     *
    public static generateDirectives(string $filename): void
    {
        \Safe\file_put_contents(
            $filename
            LaravelProcessor::getDirectivesGraphqlString()
        );
    } */

    public static function generateScalarFiles(string $ns, string $path)
    {
        // regenerate graphql
        $datatypes = [];
        /** @var array<class-string> $classesInNamespace */
        $classesInNamespace = ClassFinder::getClassesInNamespace($ns . '\\Types');
        foreach ($classesInNamespace as $class) {
            $reflection = new \ReflectionClass($class);
            if (!$reflection->isInstantiable()) {
                continue;
            }

            $datatypes[$class] = substr($class, strpos($class, "Datatype_") + mb_strlen("Datatype_"));
        }
        $scalars = \Modelarium\Util::scalars(
            $datatypes,
            $ns . '\\Types'
        );
        \Safe\file_put_contents($path, $scalars);
    }
}
